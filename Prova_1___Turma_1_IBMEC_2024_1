Questão 1:

#include <iostream>
using namespace std;
int main()
{
    string N;
    cin >> N;
    if(N.find("1444") != string::npos){
        cout << N << " es de Mala Suerte" << endl;
    } else{
        cout << N << " NO es de Mala Suerte" << endl;
    }
    return 0;
}

Questão 2:

#include <iostream>
using namespace std;
int main()
{
    int x;
    cin >> x;
    for(int i = 0; i < x; i++){
        cout << "Ho ";
    }
    cout << "IBMEC 2024!" << endl;
    return 0;
}

Questão 3:

#include <iostream>
#include <string>
#include <cctype> 
using namespace std;

int main() {
    
    string frase;
    
    while (getline(cin, frase)) {
        
        char letra_inicial = tolower(frase[0]); 
        bool tautograma = true; 

        for (int i = 1; i < frase.size(); i++) {
            if (frase[i] == ' ' && tolower(frase[i + 1])) {
                if (tolower(frase[i + 1]) != letra_inicial) {
                    tautograma = false; 
                    break;
                }
            }
        }

        if (tautograma)
            cout << 'Y' << endl;
        else
            cout << 'N' << endl;
    }

    return 0;
}

Questão 4:

#include <iostream>
using namespace std;
int main()
{
    double vet[15];
    int negativos;
    for(int i = 0; i < 15; i++){
        cin >> vet[i];
        if(vet[i] < 0){
            negativos++;
        }
    }
    cout << negativos << " valores negativos" << endl;
    return 0;
}

Questão 5:

int main(){
    Veiculo meuVeiculo("Toyota","Etios",2019,"Branco",50000.00);
    
    cout << "Detalhes do veículo:" << endl;
    meuVeiculo.exibir_detalhes();
    cout << endl;

    cout << "Depreciação após 3 anos:" << endl;
    meuVeiculo.calcular_depreciacao(3);
    cout << endl;

    cout << "Mudança de cor:" << endl;
    meuVeiculo.pintar("Vermelho");
    cout << endl;

    cout << "Aumento de preço:" << endl;
    meuVeiculo.aumentar_preco(5000.00);
    cout << endl;
    
    cout << "Atualização de modelo:" << endl;
    meuVeiculo.atualizar_modelo("Corolla Altis");
    cout << endl;
    
    cout << "Detalhes do veículo após atualizações:" << endl;
    meuVeiculo.exibir_detalhes();
    
    return 0;
}

Questão 6:

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;
class ListaDeCompras {
public:
    vector<string> itens;
    
    void adcionarItem(const string& item){
        itens.push_back(item);
        cout << item << " adicionado à lista." << endl;
    }
    void removerItem(const string& item) {
        auto it = find(itens.begin(), itens.end(), item);
        if (it != itens.end()) {
            itens.erase(it);
            cout << item << " removido da lista." << endl;
        } else {
            cout << item << " não encontrado na lista." << endl;
        }
    }
    void exibirLista(){
        if (itens.empty()) {
            cout << "A lista de compras está vazia." << endl;
            return;
        }
        cout << "Lista de Compras:" << endl;
        for (const auto& item : itens) {
            cout << "- " << item << endl;
        }
    }
    void limparLista(){
        itens.clear();
        cout << "Lista de compras limpa." << endl;
    }
};
int main(){
    ListaDeCompras lista;
    
    lista.adcionarItem("Batom");
    lista.adcionarItem("Chapéu");
    lista.adcionarItem("Batata");
    lista.adcionarItem("Guarda-Chuva");
    
    lista.exibirLista();
    cout << endl;
    
    lista.removerItem("Batom");
    
    lista.exibirLista();
    cout << endl;
    
    lista.limparLista();
    
    lista.exibirLista();
    return 0;
}

Questão 7:

#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
using namespace std;
class CadastroAlunos {
public:
    vector<string> aluno;
    
    void adicionarAluno(string nome){
        aluno.push_back(nome);
        cout << nome << " foi matriculado." << endl;
    }
    
    void removerAluno(string nome){
        auto it = find(aluno.begin(),aluno.end(),nome);
        if(it != aluno.end()){
            aluno.erase(it);
            cout << nome << " foi expulso" << endl;
        } else {
            cout << nome << " não encontrado no sistema." << endl;
        }
    }
    
    void mostrarAluno(){
        if(aluno.empty()){
            cout << "Não há alunos." << endl;
        } else {
            cout << "Lista de alunos: " << endl;
            for(string nome : aluno){
                cout << "- " << nome << endl;
            }
        }
    }
};

int main() {
    CadastroAlunos cadastro;
    
    int op;
    string nome;
    do{
        cout <<"\n Menu:" << endl;
        cout <<"1. Adcionar Aluno" << endl;
        cout <<"2. Remover" << endl;
        cout <<"3. Exibir lista de alunos" << endl;
        cout <<"4. Sair" << endl;
        cout <<"Escolha uma opção: ";
        cin >> op;
        
        switch(op){
            case 1:
                cout <<"Digite o nome do aluno: " << endl;
                cin.ignore();
                getline(cin,nome);
                cadastro.adicionarAluno(nome);
                break;
            case 2:
                cout <<"Digite o nome do aluno para ser removido: " << endl;
                cin.ignore();
                getline(cin,nome);
                cadastro.removerAluno(nome);
                break;
            case 3:
                cadastro.mostrarAluno();
                break;
            case 4:
                cout <<"Saindo do programa..." << endl;
            default:
                cout <<"Opção inválida, tente novamente." << endl;
        }
    } while(op != 4);
    
    return 0;
}


Outra questão de outra prova:
Fibonacci modificado:
#include <iostream>
using namespace std;

int main() {
    int N;
    float fibonacci[46];
    fibonacci[0] = 0;
    fibonacci[1] = 0;
    fibonacci[2] = 2;
    cin >> N;
    for(int i = 3; i < N; i++){
        fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2] + fibonacci[i - 3];
    }
    for(int i = 0; i < N; i++){
        cout << fibonacci[i] << " ";
    }
    return 0;
}
