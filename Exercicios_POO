1)
#include <iostream>
#include <string>
using namespace std;
class Pessoa {
private:
    string nome;
    int idade;
public:
    void setNome(const string& n) {
        nome = n;
    }
    string getNome() const {
        return nome;
    }
    void setIdade(int i) {
        idade = i;
    }
    int getIdade() const {
        return idade;
    }
};
int main() {
    Pessoa pessoa;
    pessoa.setNome("Gabriel");
    pessoa.setIdade(19);
    cout << "Nome: " << pessoa.getNome() << endl;
    cout << "Idade: " << pessoa.getIdade() << endl;
    return 0;
}

2)
#include <iostream>
#include <string>
using namespace std;
class Livro {
private:
    string titulo;
    string autor;
    int anoPublicacao;
public:
    Livro(const string& t, const string& a, int ano) {
        titulo = t;
        autor = a;
        anoPublicacao = ano;
    }
    void exibirInformacoes() const {
        cout << "Titulo: " << titulo << endl;
        cout << "Autor: " << autor << endl;
        cout << "Ano de Publicacao: " << anoPublicacao << endl;
    }
};
int main() {
    Livro livro("O Senhor dos Aneis", "J.R.R. Tolkien", 1954);
    Livro livro2("Animal Farm", "George Orwell", 1945);
    cout << "Informações do primeiro livro: " << endl;
    livro.exibirInformacoes();
    cout << "Informações do segundo livro: " << endl;
    livro2.exibirInformacoes();
    return 0;
}

3)
#include <iostream>
#include <string>
using namespace std;
class ContaBancaria {
private:
    int numeroConta;
    double saldo;
    string titular;
public:
    ContaBancaria(int numero, const string& nomeTitular, double saldoInicial = 0.0) {
        numeroConta = numero;
        titular = nomeTitular;
        saldo = saldoInicial;
    }
    void setNumeroConta(int numero) {
        numeroConta = numero;
    }
    int getNumeroConta() const {
        return numeroConta;
    }
    void setTitular(const string& nomeTitular) {
        titular = nomeTitular;
    }
    string getTitular() const {
        return titular;
    }
    void setSaldo(double valor) {
        saldo = valor;
    }
    double getSaldo() const {
        return saldo;
    }
    void depositar(double valor) {
        if (valor > 0) {
            saldo += valor;
            cout << "Depósito de R$ " << valor << " realizado com sucesso." << endl;
        } else {
            cout << "Valor de depósito inválido!" << endl;
        }
    }
    void sacar(double valor) {
        if (valor > 0 && valor <= saldo) {
            saldo -= valor;
            cout << "Saque de R$ " << valor << " realizado com sucesso." << endl;
        } else if (valor > saldo) {
            cout << "Saldo insuficiente para realizar o saque." << endl;
        } else {
            cout << "Valor de saque inválido!" << endl;
        }
    }
    void exibirInformacoes() const {
        cout << "Numero da Conta: " << numeroConta << endl;
        cout << "Titular: " << titular << endl;
        cout << "Saldo: R$ " << saldo << endl;
    }
};
int main() {
    ContaBancaria conta(345677, "Gabriel Miler", 3850.0);
    conta.exibirInformacoes();
    conta.depositar(225.0);
    conta.sacar(912.0);
    conta.sacar(1500.0); 
    conta.exibirInformacoes();
    return 0;
}

4)
#include <iostream>
#include <string>
using namespace std;
class Aluno {
private:
    string nome;
    int matricula;
    float nota;
public:
    void setNome(const string& n) {
        nome = n;
    }

    void setMatricula(int m) {
        matricula = m;
    }
    void setNota(float n) {
        nota = n;
    }
    string getNome() const {
        return nome;
    }

    int getMatricula() const {
        return matricula;
    }

    float getNota() const {
        return nota;
    }
    void mostrarDados() const {
        cout << "Nome: " << nome << endl;
        cout << "Matricula: " << matricula << endl;
        cout << "Nota: " << nota << endl;
    }
};
int main() {
    Aluno aluno;
    aluno.setNome("Geraldo Andrade");
    aluno.setMatricula(202402399);
    aluno.setNota(9.6);
    aluno.mostrarDados();
    Aluno aluno2;
    aluno2.setNome("Gabriel Miler");
    aluno2.setMatricula(202400128);
    aluno2.setNota(5.1);
    aluno2.mostrarDados();
    return 0;
}

5)
#include <iostream>
#include <string>
using namespace std;
class Produto {
private:
    string nome;
    double preco;
    int quantidadeEstoque;
public:
    void setNome(const string& n) {
        nome = n;
    }
    void setPreco(double p) {
        preco = p;
    }
    void setQuantidadeEstoque(int q) {
        quantidadeEstoque = q;
    }
    string getNome() const {
        return nome;
    }

    double getPreco() const {
        return preco;
    }

    int getQuantidadeEstoque() const {
        return quantidadeEstoque;
    }
    void reporEstoque(int quantidade) {
        if (quantidade > 0) {
            quantidadeEstoque += quantidade;
            cout << "Foram repostos " << quantidade << " unidades ao estoque." << endl;
        } else {
            cout << "Quantidade inválida para reposição!" << endl;
        }
    }
    void retirarEstoque(int quantidade) {
        if (quantidade > 0 && quantidade <= quantidadeEstoque) {
            quantidadeEstoque -= quantidade;
            cout << "Foram retirados " << quantidade << " unidades do estoque." << endl;
        } else if (quantidade > quantidadeEstoque) {
            cout << "Estoque insuficiente para retirar a quantidade solicitada." << endl;
        } else {
            cout << "Quantidade inválida para retirada!" << endl;
        }
    }
    void mostrarInformacoes() const {
        cout << "Produto: " << nome << endl;
        cout << "Preco: R$ " << preco << endl;
        cout << "Quantidade em estoque: " << quantidadeEstoque << " unidades" << endl;
    }
};
int main() {
    Produto produto;
    produto.setNome("Kindle");
    produto.setPreco(1500.00);
    produto.setQuantidadeEstoque(50);
    produto.mostrarInformacoes();
    produto.reporEstoque(20);
    produto.retirarEstoque(10);
    produto.retirarEstoque(100);  
    produto.mostrarInformacoes();
    return 0;
}

6)
#include <iostream>
#include <string>
using namespace std;
class Carro {
private:
    string marca;
    string modelo;
    int ano;
public:
    void setMarca(const string& m) {
        marca = m;
    }

    void setModelo(const string& mod) {
        modelo = mod;
    }
    void setAno(int a) {
        ano = a;
    }
    string getMarca() const {
        return marca;
    }
    string getModelo() const {
        return modelo;
    }
    int getAno() const {
        return ano;
    }
    void exibirDetalhes() const {
        cout << "Marca: " << marca << endl;
        cout << "Modelo: " << modelo << endl;
        cout << "Ano: " << ano << endl;
    }
};
int main() {
    Carro carro;
    carro.setMarca("Toyota");
    carro.setModelo("Etios");
    carro.setAno(2018);
    carro.exibirDetalhes();
    Carro carro2;
    carro2.setMarca("Honda");
    carro2.setModelo("Civic");
    carro2.setAno(2021);
    carro2.exibirDetalhes();
    return 0;
}

7)
#include <iostream>
#include <string>
using namespace std;
class Funcionario {
private:
    string nome;
    string cargo;
    double salario;
public:
    void setNome(const string& n) {
        nome = n;
    }
    void setCargo(const string& c) {
        cargo = c;
    }
    void setSalario(double s) {
        salario = s;
    }
    string getNome() const {
        return nome;
    }
    string getCargo() const {
        return cargo;
    }
    double getSalario() const {
        return salario;
    }
    void aumentarSalario(double percentual) {
        if (percentual > 0) {
            salario += salario * (percentual / 100);
            cout << "Salário aumentado em " << percentual << "%." << endl;
        } else {
            cout << "Percentual inválido!" << endl;
        }
    }
    void exibirInformacoes() const {
        cout << "Nome: " << nome << endl;
        cout << "Cargo: " << cargo << endl;
        cout << "Salário: R$ " << salario << endl;
    }
};
int main() {
    Funcionario funcionario1;
    funcionario1.setNome("Gabriel Miler");
    funcionario1.setCargo("Engenhario de Software");
    funcionario1.setSalario(6750.00);
    funcionario1.exibirInformacoes();
    funcionario1.aumentarSalario(10);
    funcionario1.exibirInformacoes();
    return 0;
}

8)
#include <iostream>
using namespace std;
class Caixa {
private:
    double comprimento;
    double largura;
    double altura;
public:
    void setComprimento(double c) {
        comprimento = c;
    }
    void setLargura(double l) {
        largura = l;
    }
    void setAltura(double a) {
        altura = a;
    }
    friend double calcularVolume(Caixa &c);
};
double calcularVolume(Caixa &c) {
    return c.comprimento * c.largura * c.altura;
}
int main() {
    Caixa caixa;
    caixa.setComprimento(10.0);
    caixa.setLargura(6.0);
    caixa.setAltura(8.0);
    double volume = calcularVolume(caixa1);
    cout << "O volume da caixa é: " << volume << " unidades cúbicas" << endl;
    return 0;
}

9)
#include <iostream>
#include <cmath>  
using namespace std;
class Ponto {
private:
    double x;
    double y;
public:
    Ponto(double _x = 0.0, double _y = 0.0) : x(_x), y(_y) {}
    void setX(double _x) {
        x = _x;
    }
    void setY(double _y) {
        y = _y;
    }
    double getX() const {
        return x;
    }
    double getY() const {
        return y;
    }
    friend class Linha;
};
class Linha {
private:
    Ponto ponto;
    Ponto ponto2;
public:
    Linha(Ponto _ponto, Ponto _ponto2) : ponto(_ponto), ponto2(_ponto2) {}
    friend double calcularComprimento(Linha &l);
};
double calcularComprimento(Linha &l) {
    double deltaX = l.ponto2.getX() - l.ponto.getX();
    double deltaY = l.ponto2.getY() - l.ponto.getY();
    return sqrt(deltaX * deltaX + deltaY * deltaY);  
}
int main() {
    Ponto p1(2.0, 4.0);
    Ponto p2(9.0, 12.0);
    Linha linha(p1, p2);
    double comprimento = calcularComprimento(linha);
    cout << "O comprimento da linha é: " << comprimento << endl;
    return 0;
}

10)
#include <iostream>
using namespace std;
class NumeroComplexo {
private:
    double real;
    double imag;
public:
    NumeroComplexo(double r = 0.0, double i = 0.0) : real(r), imag(i) {}
    void setReal(double r) {
        real = r;
    }
    void setImag(double i) {
        imag = i;
    }
    double getReal() const {
        return real;
    }
    double getImag() const {
        return imag;
    }
    friend NumeroComplexo somar(NumeroComplexo &a, NumeroComplexo &b);
    void exibir() const {
        cout << real << " + " << imag << "i" << endl;
    }
};
NumeroComplexo somar(NumeroComplexo &a, NumeroComplexo &b) {
    return NumeroComplexo(a.real + b.real, a.imag + b.imag);
}
int main() {
    NumeroComplexo num(2.0, 3.0);
    NumeroComplexo num2(4.5, 6.5);
    cout << "Primeiro número complexo: ";
    num.exibir();
    cout << "Segundo número complexo: ";
    num2.exibir();
    NumeroComplexo resultado = somar(num1, num2);
    cout << "Soma dos números complexos: ";
    resultado.exibir();
    return 0;
}

11)
#include <iostream>
#include <string>
using namespace std;
class Pessoa {
private:
    string nome;
    int idade;
public:
    Pessoa(string n, int i) : nome(n), idade(i) {}
    friend class Empresa;
};
class Empresa {
public:
    void mostrarDetalhes(Pessoa &p) {
        cout << "Nome: " << p.nome << endl;
        cout << "Idade: " << p.idade << endl;
    }
};
int main() {
    Pessoa p1("Gabriel", 19);
    Empresa empresa;
    empresa.mostrarDetalhes(p1);
    return 0;
}

12)
#include <iostream>
using namespace std;
class Retangulo {
private:
    double largura;
    double altura;
public:
    Retangulo(double l, double a) : largura(l), altura(a) {}
    friend double calcularArea(Retangulo &r);
};
double calcularArea(Retangulo &r) {
    return r.largura * r.altura;
}
int main() {
    Retangulo retangulo(9.0, 8.23);
    cout << "Área do retângulo: " << calcularArea(retangulo) << endl;
    return 0;
}

13)
#include <iostream>
#include <string>
using namespace std;
class Animal {
protected:
    string nome;
public:
    Animal(string n) : nome(n) {}
    virtual void falar() {
        cout << nome << " está fazendo um som genérico." << endl;
    }
};
class Cachorro : public Animal {
public:
    Cachorro(string n) : Animal(n) {}
    void falar() override {
        cout << nome << " diz: Au Au!" << endl;
    }
};
class Gato : public Animal {
public:
    Gato(string n) : Animal(n) {}
    void falar() override {
        cout << nome << " diz: Miau!" << endl;
    }
};
int main() {
    Cachorro cachorro("Netuno");
    Gato gato("Juju");
    cachorro.falar();  
    gato.falar();      
    return 0;
}

14)
#include <iostream>
#include <string>
using namespace std;
class Veiculo {
protected:
    string marca;
    string modelo;
public:
    Veiculo(string m, string mod) : marca(m), modelo(mod) {}
    virtual void exibirDetalhes() {
        cout << "Marca: " << marca << endl;
        cout << "Modelo: " << modelo << endl;
    }
};
class Carro : public Veiculo {
private:
    int numeroPortas;
public:
    Carro(string m, string mod, int portas) : Veiculo(m, mod), numeroPortas(portas) {}
    void exibirDetalhes() override {
        Veiculo::exibirDetalhes();
        cout << "Número de portas: " << numeroPortas << endl;
    }
};
int main() {
    Carro carro("Toyota", "Etios", 4);
    carro.exibirDetalhes();
    return 0;
}

15)
#include <iostream>
#include <string>
using namespace std;
class Funcionario {
protected:
    string nome;
    double salario;
public:
    Funcionario(string n, double s) : nome(n), salario(s) {}
    virtual void aumentarSalario(double percentual) {
        salario += salario * (percentual / 100.0);
    }
    void exibirDetalhes() {
        cout << "Nome: " << nome << endl;
        cout << "Salário: R$ " << salario << endl;
    }
};
class Gerente : public Funcionario {
public:
    Gerente(string n, double s) : Funcionario(n, s) {}
    void aumentarSalario(double percentual = 10) override {
        Funcionario::aumentarSalario(percentual);
    }
};
class Assistente : public Funcionario {
public:
    Assistente(string n, double s) : Funcionario(n, s) {}
    void aumentarSalario(double percentual = 5) override {
        Funcionario::aumentarSalario(percentual);
    }
};
int main() {
    Gerente gerente("Gabriel", 6850.00);
    Assistente assistente("Michelle", 3015.00);
    cout << "Antes do aumento:" << endl;
    gerente.exibirDetalhes();
    assistente.exibirDetalhes();
    gerente.aumentarSalario();    
    assistente.aumentarSalario(); 
    cout << "\nApós o aumento:" << endl;
    gerente.exibirDetalhes();
    assistente.exibirDetalhes();
    return 0;
}

16)
#include <iostream>
using namespace std;
class Contador {
private:
    static int contador;
public:
    void incrementar() {
        contador++;
    }
    int obterContador() const {
        return contador;
    }
};
int Contador::contador = 0;
int main() {
    Contador c, c2, c3;
    c.incrementar();
    cout << "Valor do contador após c1.incrementar(): " << c.obterContador() << endl;
    c2.incrementar();
    cout << "Valor do contador após c2.incrementar(): " << c2.obterContador() << endl;
    c3.incrementar();
    cout << "Valor do contador após c3.incrementar(): " << c3.obterContador() << endl;
    return 0;
}

17)
#include <iostream>
using namespace std;
class Funcionario {
private:
    static int totalFuncionarios;
public:
    Funcionario() {
        totalFuncionarios++;
    }
    static int obterTotalFuncionarios() {
        return totalFuncionarios;
    }
};
int Funcionario::totalFuncionarios = 0;
int main() {
    Funcionario f;
    Funcionario f2;
    Funcionario f3;
    cout << "Total de funcionarios criados: " << Funcionario::obterTotalFuncionarios() << endl;
    return 0;
}

18)
#include <iostream>
using namespace std;
class Produto {
public:
    static double desconto;
    static void definirDesconto(double valor) {
        desconto = valor;
    }
    static double obterDesconto() {
        return desconto;
    }
};
double Produto::desconto = 0.0;
int main() {
    Produto p;
    Produto p2;
    Produto::definirDesconto(47.0);
    cout << "Desconto para o produto 1: " << p.obterDesconto() << "%" << endl;
    cout << "Desconto para o produto 2: " << p2.obterDesconto() << "%" << endl;
    Produto::definirDesconto(83.0);
    cout << "Novo desconto para o produto 1: " << p.obterDesconto() << "%" << endl;
    cout << "Novo desconto para o produto 2: " << p2.obterDesconto() << "%" << endl;
    return 0;
}

19)
#include <iostream>
using namespace std;
class Banco {
private:
    static double taxaJuros;
public:
    static void definirTaxaJuros(double valor) {
        taxaJuros = valor;
    }
    static double obterTaxaJuros() {
        return taxaJuros;
    }
};
double Banco::taxaJuros = 0.0;
int main() {
    Banco banco;
    Banco banco2;
    Banco::definirTaxaJuros(2.8);
    cout << "Taxa de juros do banco1: " << banco.obterTaxaJuros() << "%" << endl;
    cout << "Taxa de juros do banco2: " << banco2.obterTaxaJuros() << "%" << endl;
    Banco::definirTaxaJuros(9.0);
    cout << "Nova taxa de juros do banco1: " << banco.obterTaxaJuros() << "%" << endl;
    cout << "Nova taxa de juros do banco2: " << banco2.obterTaxaJuros() << "%" << endl;

    return 0;
}

20)
#include <iostream>
#include <string>
using namespace std;
class Sistema {
private:
    static string versao;
public:
    static void definirVersao(string novaVersao) {
        versao = novaVersao;
    }
    static string obterVersao() {
        return versao;
    }
};
string Sistema::versao = "1.0";
int main() {
    Sistema sistema;
    Sistema sistema2;
    cout << "Versão inicial do sistema: " << Sistema::obterVersao() << endl;
    Sistema::definirVersao("1.5");
    cout << "Versão do sistema1: " << sistema.obterVersao() << endl;
    cout << "Versão do sistema2: " << sistema2.obterVersao() << endl;
    Sistema::definirVersao("2.101");
    cout << "Nova versão do sistema1: " << sistema.obterVersao() << endl;
    cout << "Nova versão do sistema2: " << sistema2.obterVersao() << endl;
    return 0;
}

21)


22
23
24
25
26
27
28
29
30
31
