Listas Encadeadas

Exercícios Básicos

1)
#include <iostream>
using namespace std;

class Node {
public:
    int dado;
    Node *prox;
    
    Node(int d, Node* p = nullptr) : dado(d), prox(p) {} // Construtor
};

class ListaEncadeada {
private:
    Node *h; // Cabeça da lista
    
public:
    ListaEncadeada() {
        h = new Node(0); 
        h->prox = nullptr;
    }
    
    ~ListaEncadeada() {
        while (h->prox != nullptr) {
            removeLista(h->prox->dado); 
        }
        delete h; 
    }
    
    void insereLista(int x) {
        Node *n = new Node(x);
        n->prox = h->prox;
        h->prox = n;
    }
    
    int contaElementos() const {
        int contador = 0;
        Node *atual = h->prox; // Ignorar o nó cabeça
        while (atual != nullptr) {
            contador++;
            atual = atual->prox;
        }
        return contador;
    }
};

int main() {
    ListaEncadeada lista;
    
    lista.insereLista(1);
    lista.insereLista(2);
    lista.insereLista(3);
    
    cout << "Número de elementos na lista: " << lista.contaElementos() << endl;
    
    return 0;
}

2)
#include <iostream>
using namespace std;

class Node {
public:
    int dado;
    Node *prox;
    
    Node(int d, Node* p = nullptr) : dado(d), prox(p) {} 
};

class ListaEncadeada {
private:
    Node *h; 
    
public:
    ListaEncadeada() {
        h = new Node(0); 
        h->prox = nullptr;
    }
    
    ~ListaEncadeada() {
        while (h->prox != nullptr) {
            removeLista(h->prox->dado); 
        }
        delete h; 
    }
    
    void insereLista(int x) {
        Node *n = new Node(x);
        n->prox = h->prox;
        h->prox = n;
    }
    
    bool removeLista(int x) {
        Node *ant = h;
        Node *atual = h->prox;
        
        while (atual != nullptr) {
            if (atual->dado == x) {
                ant->prox = atual->prox;
                delete atual;
                return true;
            }
            ant = atual;
            atual = atual->prox;
        }
        return false;
    }

    bool buscaElemento(int x) const {
        Node *atual = h->prox; 
        while (atual != nullptr) {
            if (atual->dado == x) {
                return true; 
            }
            atual = atual->prox;
        }
        return false; 
    }
};

int main() {
    ListaEncadeada lista;
    
    lista.insereLista(1);
    lista.insereLista(2);
    lista.insereLista(3);
    
    cout << "Elemento 2 está na lista? " << (lista.buscaElemento(2) ? "Sim" : "Não") << endl;
    cout << "Elemento 5 está na lista? " << (lista.buscaElemento(5) ? "Sim" : "Não") << endl;
    
    return 0;
}

3)
#include <iostream>
using namespace std;

class Node {
public:
    int dado;
    Node *prox;

    Node(int d, Node *p = nullptr) : dado(d), prox(p) {}
};

class ListaEncadeada {
private:
    Node *h;

public:
    ListaEncadeada() {
        h = new Node(0);
        h->prox = nullptr;
    }

    ~ListaEncadeada() {
        while (h->prox != nullptr) {
            removeLista(h->prox->dado);
        }
        delete h;
    }

    void insereLista(int x) {
        Node *n = new Node(x);
        n->prox = h->prox;
        h->prox = n;
    }

    bool removeLista(int x) {
        Node *ant = h;
        Node *atual = h->prox;

        while (atual != nullptr) {
            if (atual->dado == x) {
                ant->prox = atual->prox;
                delete atual;
                return true;
            }
            ant = atual;
            atual = atual->prox;
        }
        return false;
    }

    void inverterLista() {
        Node *prev = nullptr;
        Node *current = h->prox;
        Node *next = nullptr;

        while (current != nullptr) {
            next = current->prox; 
            current->prox = prev; 
            prev = current;       
            current = next;       
        }

        h->prox = prev; /
    }

    void imprimeLista() {
        Node *atual = h->prox;
        while (atual != nullptr) {
            cout << atual->dado << " -> ";
            atual = atual->prox;
        }
        cout << "NULL" << endl;
    }
};

int main() {
    ListaEncadeada lista;

    lista.insereLista(1);
    lista.insereLista(2);
    lista.insereLista(3);

    cout << "Lista original: ";
    lista.imprimeLista();

    lista.inverterLista();

    cout << "Lista invertida: ";
    lista.imprimeLista();

    return 0;
}


4)
#include <iostream>
using namespace std;

class Node {
public:
    int dado;
    Node *prox;
    
    Node(int d, Node* p = nullptr) : dado(d), prox(p) {} // Construtor
};

class ListaEncadeada {
private:
    Node *h; 
    
public:
    ListaEncadeada() {
        h = new Node(0); 
        h->prox = nullptr;
    }
    
    ~ListaEncadeada() {
        while (h->prox != nullptr) {
            removeLista(h->prox->dado); 
        }
        delete h; 
    }
    
    void insereLista(int x) {
        Node *n = new Node(x);
        n->prox = h->prox;
        h->prox = n;
    }
    
    void insereNoFinal(int x) {
        Node *atual = h;
        
        while (atual->prox != nullptr) {
            atual = atual->prox;
        }
        
        atual->prox = new Node(x);
    }
    
    int contaElementos() const {
        int contador = 0;
        Node *atual = h->prox; 
        while (atual != nullptr) {
            contador++;
            atual = atual->prox;
        }
        return contador;
    }
    
    bool removeLista(int x) {
        Node *ant = h;
        Node *atual = h->prox;
        
        while (atual != nullptr) {
            if (atual->dado == x) {
                ant->prox = atual->prox;
                delete atual;
                return true;
            }
            ant = atual;
            atual = atual->prox;
        }
        return false;
    }
};

int main() {
    ListaEncadeada lista;
    
    lista.insereLista(1); 
    lista.insereLista(2); 
    lista.insereLista(3); 
    lista.insereNoFinal(4); 
    lista.insereNoFinal(5); 
    
    cout << "Número de elementos na lista: " << lista.contaElementos() << endl;
    
    return 0;
}


Exercícios Intermediarios

1)
#include <iostream>
using namespace std;

class Node {
public:
    int dado;
    Node *prox;
    
    Node(int d, Node* p = nullptr) : dado(d), prox(p) {} 
};

class ListaEncadeada {
private:
    Node *h; 
    
public:
    ListaEncadeada() {
        h = new Node(0); 
        h->prox = nullptr;
    }
    
    ~ListaEncadeada() {
        while (h->prox != nullptr) {
            removeLista(h->prox->dado); 
        }
        delete h; 
    }
    
    void insereLista(int x) {
        Node *n = new Node(x);
        n->prox = h->prox;
        h->prox = n;
    }
    
    int contaElementos() const {
        int contador = 0;
        Node *atual = h->prox; 
        while (atual != nullptr) {
            contador++;
            atual = atual->prox;
        }
        return contador;
    }
    
    bool removeLista(int x) {
        Node *ant = h;
        Node *atual = h->prox;
        
        while (atual != nullptr) {
            if (atual->dado == x) {
                ant->prox = atual->prox;
                delete atual;
                return true;
            }
            ant = atual;
            atual = atual->prox;
        }
        return false;
    }

    void removeDuplicados() {
        Node *atual = h->prox; 
        
        while (atual != nullptr) {
            Node *ant = atual;
            Node *prox = atual->prox;
            
            while (prox != nullptr) {
                if (atual->dado == prox->dado) {
                    ant->prox = prox->prox; 
                    delete prox;            
                    prox = ant->prox;       
                } else {
                    ant = prox;
                    prox = prox->prox;
                }
            }
            atual = atual->prox; 
        }
    }
};

int main() {
    ListaEncadeada lista;
    
    lista.insereLista(1); 
    lista.insereLista(2); 
    lista.insereLista(3); 
    lista.insereLista(3);  

    cout << "Número de elementos antes de remover duplicatas: " << lista.contaElementos() << endl;
    lista.removeDuplicados(); 
    cout << "Número de elementos após remover duplicatas: " << lista.contaElementos() << endl;
    
    return 0;
}

2)
#include <iostream>
using namespace std;

class Node {
public:
    int dado;
    Node *prox;

    Node(int d, Node* p = nullptr) : dado(d), prox(p) {} 
};

class ListaEncadeada {
private:
    Node *h; 

public:
    ListaEncadeada() {
        h = new Node(0); 
        h->prox = nullptr;
    }

    ~ListaEncadeada() {
        while (h->prox != nullptr) {
            removeLista(h->prox->dado); 
        }
        delete h; 
    }

    void insereLista(int x) {
        Node *n = new Node(x);
        n->prox = h->prox;
        h->prox = n;
    }

    void insereNoFinal(int x) {
        Node *atual = h;

        while (atual->prox != nullptr) {
            atual = atual->prox;
        }

        atual->prox = new Node(x);
    }

    int contaElementos() const {
        int contador = 0;
        Node *atual = h->prox; 
        while (atual != nullptr) {
            contador++;
            atual = atual->prox;
        }
        return contador;
    }

    bool removeLista(int x) {
        Node *ant = h;
        Node *atual = h->prox;

        while (atual != nullptr) {
            if (atual->dado == x) {
                ant->prox = atual->prox;
                delete atual;
                return true;
            }
            ant = atual;
            atual = atual->prox;
        }
        return false;
    }

    void imprimeLista() const {
        Node *atual = h->prox;
        while (atual != nullptr) {
            cout << atual->dado << " ";
            atual = atual->prox;
        }
        cout << endl;
    }

    friend ListaEncadeada mesclaListas(const ListaEncadeada &lista1, const ListaEncadeada &lista2);
};

ListaEncadeada mesclaListas(const ListaEncadeada &lista1, const ListaEncadeada &lista2) {
    ListaEncadeada listaMesclada;

    Node *ptr1 = lista1.h->prox; 
    Node *ptr2 = lista2.h->prox; 

    while (ptr1 != nullptr && ptr2 != nullptr) {
        if (ptr1->dado <= ptr2->dado) {
            listaMesclada.insereNoFinal(ptr1->dado);
            ptr1 = ptr1->prox;
        } else {
            listaMesclada.insereNoFinal(ptr2->dado);
            ptr2 = ptr2->prox;
        }
    }

    while (ptr1 != nullptr) {
        listaMesclada.insereNoFinal(ptr1->dado);
        ptr1 = ptr1->prox;
    }

    while (ptr2 != nullptr) {
        listaMesclada.insereNoFinal(ptr2->dado);
        ptr2 = ptr2->prox;
    }

    return listaMesclada;
}

int main() {
    ListaEncadeada lista1;
    ListaEncadeada lista2;

    lista1.insereNoFinal(1);
    lista1.insereNoFinal(3);
    lista1.insereNoFinal(5);

    lista2.insereNoFinal(2);
    lista2.insereNoFinal(4);
    lista2.insereNoFinal(6);

    cout << "Lista 1: ";
    lista1.imprimeLista();

    cout << "Lista 2: ";
    lista2.imprimeLista();

    ListaEncadeada listaMesclada = mesclaListas(lista1, lista2);

    cout << "Lista Mesclada: ";
    listaMesclada.imprimeLista();

    return 0;
}

3)
#include <iostream>
using namespace std;

class Node {
public:
    int dado;
    Node *prox;

    Node(int d, Node* p = nullptr) : dado(d), prox(p) {} 
};

class ListaEncadeada {
private:
    Node *h;

public:
    ListaEncadeada() {
        h = new Node(0);
        h->prox = nullptr;
    }

    ~ListaEncadeada() {
        while (h->prox != nullptr) {
            removeLista(h->prox->dado);
        }
        delete h;
    }

    void insereLista(int x) {
        Node *n = new Node(x);
        n->prox = h->prox;
        h->prox = n;
    }

    void insereNoFinal(int x) {
        Node *atual = h;

        while (atual->prox != nullptr) {
            atual = atual->prox;
        }

        atual->prox = new Node(x);
    }

    int contaElementos() const {
        int contador = 0;
        Node *atual = h->prox;
        while (atual != nullptr) {
            contador++;
            atual = atual->prox;
        }
        return contador;
    }

    bool removeLista(int x) {
        Node *ant = h;
        Node *atual = h->prox;

        while (atual != nullptr) {
            if (atual->dado == x) {
                ant->prox = atual->prox;
                delete atual;
                return true;
            }
            ant = atual;
            atual = atual->prox;
        }
        return false;
    }

    void imprimeLista() const {
        Node *atual = h->prox;
        while (atual != nullptr) {
            cout << atual->dado << " ";
            atual = atual->prox;
        }
        cout << endl;
    }

    void ordenaPorSelecao() {
        Node *atual = h->prox; 
        
        while (atual != nullptr) {
            Node *menor = atual;
            Node *ptr = atual->prox;

            while (ptr != nullptr) {
                if (ptr->dado < menor->dado) {
                    menor = ptr;
                }
                ptr = ptr->prox;
            }

            if (menor != atual) {
                int temp = atual->dado;
                atual->dado = menor->dado;
                menor->dado = temp;
            }

            atual = atual->prox; 
        }
    }
};
int main() {
    ListaEncadeada lista;

    lista.insereNoFinal(5);
    lista.insereNoFinal(3);
    lista.insereNoFinal(8);
    lista.insereNoFinal(1);
    lista.insereNoFinal(4);

    cout << "Lista original: ";
    lista.imprimeLista();

    lista.ordenaPorSelecao();

    cout << "Lista ordenada: ";
    lista.imprimeLista();

    return 0;
}


Exercícios Avançados

1)
#include <iostream>
#include <stdexcept> // Para exceções
using namespace std;

class Node {
public:
    int dado;
    Node *prox;

    Node(int d, Node* p = nullptr) : dado(d), prox(p) {}
};

class ListaEncadeada {
private:
    Node *h;

public:
    ListaEncadeada() {
        h = new Node(0); // Nó cabeça
        h->prox = nullptr;
    }

    ~ListaEncadeada() {
        while (h->prox != nullptr) {
            removeLista(h->prox->dado);
        }
        delete h;
    }

    void insereLista(int x) {
        Node *n = new Node(x);
        n->prox = h->prox;
        h->prox = n;
    }

    void insereNoFinal(int x) {
        Node *atual = h;
        while (atual->prox != nullptr) {
            atual = atual->prox;
        }
        atual->prox = new Node(x);
    }

    int contaElementos() const {
        int contador = 0;
        Node *atual = h->prox;
        while (atual != nullptr) {
            contador++;
            atual = atual->prox;
        }
        return contador;
    }

    bool removeLista(int x) {
        Node *ant = h;
        Node *atual = h->prox;

        while (atual != nullptr) {
            if (atual->dado == x) {
                ant->prox = atual->prox;
                delete atual;
                return true;
            }
            ant = atual;
            atual = atual->prox;
        }
        return false;
    }

    void imprimeLista() const {
        Node *atual = h->prox;
        while (atual != nullptr) {
            cout << atual->dado << " ";
            atual = atual->prox;
        }
        cout << endl;
    }

    int encontraElementoAPartirDoFinal(int n) {
        Node *p1 = h->prox; 
        Node *p2 = h->prox; 

        for (int i = 0; i < n; i++) {
            if (p1 == nullptr) {
                throw invalid_argument("N é maior que o número de elementos na lista.");
            }
            p1 = p1->prox;
        }

        while (p1 != nullptr) {
            p1 = p1->prox;
            p2 = p2->prox;
        }

        if (p2 == nullptr) {
            throw runtime_error("Erro inesperado.");
        }

        return p2->dado;
    }
};

int main() {
    ListaEncadeada lista;

    lista.insereNoFinal(10);
    lista.insereNoFinal(20);
    lista.insereNoFinal(30);
    lista.insereNoFinal(40);
    lista.insereNoFinal(50);

    cout << "Lista: ";
    lista.imprimeLista();

    try {
        int n = 2; 
        int elemento = lista.encontraElementoAPartirDoFinal(n);
        cout << "O " << n << "º elemento a partir do final é: " << elemento << endl;
    } catch (const exception &e) {
        cout << "Erro: " << e.what() << endl;
    }

    return 0;
}

2)
#include <iostream>
#include <stdexcept> // Para exceções
using namespace std;

class Node {
public:
    int dado;
    Node *prox;

    Node(int d, Node* p = nullptr) : dado(d), prox(p) {}
};

class ListaEncadeada {
private:
    Node *h;

public:
    ListaEncadeada() {
        h = new Node(0); // Nó cabeça
        h->prox = nullptr;
    }

    ~ListaEncadeada() {
        while (h->prox != nullptr) {
            removeLista(h->prox->dado);
        }
        delete h;
    }

    void insereLista(int x) {
        Node *n = new Node(x);
        n->prox = h->prox;
        h->prox = n;
    }

    void insereNoFinal(int x) {
        Node *atual = h;
        while (atual->prox != nullptr) {
            atual = atual->prox;
        }
        atual->prox = new Node(x);
    }

    int contaElementos() const {
        int contador = 0;
        Node *atual = h->prox;
        while (atual != nullptr) {
            contador++;
            atual = atual->prox;
        }
        return contador;
    }

    bool removeLista(int x) {
        Node *ant = h;
        Node *atual = h->prox;

        while (atual != nullptr) {
            if (atual->dado == x) {
                ant->prox = atual->prox;
                delete atual;
                return true;
            }
            ant = atual;
            atual = atual->prox;
        }
        return false;
    }

    void imprimeLista() const {
        Node *atual = h->prox;
        while (atual != nullptr) {
            cout << atual->dado << " ";
            atual = atual->prox;
        }
        cout << endl;
    }

    void removeNEsimoAPartirDoFinal(int n) {
        Node *p1 = h->prox; // Ponteiro que avança
        Node *p2 = h;       // Ponteiro que ficará n passos atrás

        for (int i = 0; i < n; i++) {
            if (p1 == nullptr) {
                throw invalid_argument("N é maior que o número de elementos na lista.");
            }
            p1 = p1->prox;
        }

        while (p1 != nullptr) {
            p1 = p1->prox;
            p2 = p2->prox;
        }

        Node *paraRemover = p2->prox;
        if (paraRemover == nullptr) {
            throw runtime_error("Erro: índice inválido.");
        }
        p2->prox = paraRemover->prox;
        delete paraRemover;
    }
};

int main() {
    ListaEncadeada lista;

    lista.insereNoFinal(10);
    lista.insereNoFinal(20);
    lista.insereNoFinal(30);
    lista.insereNoFinal(40);
    lista.insereNoFinal(50);

    cout << "Lista: ";
    lista.imprimeLista();

    try {
        int n = 2; 
        lista.removeNEsimoAPartirDoFinal(n);
        cout << "Após remover o " << n << "º elemento a partir do final: ";
        lista.imprimeLista();
    } catch (const exception &e) {
        cout << "Erro: " << e.what() << endl;
    }

    return 0;
}

3)
#include <iostream>
#include <stdexcept> // Para exceções
using namespace std;

class Node {
public:
    int dado;
    Node *prox;

    Node(int d, Node* p = nullptr) : dado(d), prox(p) {}
};

class ListaEncadeada {
private:
    Node *h;

public:
    ListaEncadeada() {
        h = new Node(0); // Nó cabeça
        h->prox = nullptr;
    }

    ~ListaEncadeada() {
        while (h->prox != nullptr) {
            removeLista(h->prox->dado);
        }
        delete h;
    }

    void insereLista(int x) {
        Node *n = new Node(x);
        n->prox = h->prox;
        h->prox = n;
    }

    void insereNoFinal(int x) {
        Node *atual = h;
        while (atual->prox != nullptr) {
            atual = atual->prox;
        }
        atual->prox = new Node(x);
    }

    int contaElementos() const {
        int contador = 0;
        Node *atual = h->prox;
        while (atual != nullptr) {
            contador++;
            atual = atual->prox;
        }
        return contador;
    }

    bool removeLista(int x) {
        Node *ant = h;
        Node *atual = h->prox;

        while (atual != nullptr) {
            if (atual->dado == x) {
                ant->prox = atual->prox;
                delete atual;
                return true;
            }
            ant = atual;
            atual = atual->prox;
        }
        return false;
    }

    void imprimeLista() const {
        Node *atual = h->prox;
        while (atual != nullptr) {
            cout << atual->dado << " ";
            atual = atual->prox;
        }
        cout << endl;
    }

    void duplicaElementos() {
        Node *atual = h->prox; 
        while (atual != nullptr) {
            
            Node *duplicado = new Node(atual->dado);
            
            duplicado->prox = atual->prox;
            atual->prox = duplicado;
            
            atual = duplicado->prox;
        }
    }
};

int main() {
    ListaEncadeada lista;

    lista.insereNoFinal(10);
    lista.insereNoFinal(20);
    lista.insereNoFinal(30);

    cout << "Lista original: ";
    lista.imprimeLista();

    lista.duplicaElementos();

    cout << "Lista após duplicar os elementos: ";
    lista.imprimeLista();

    return 0;
}


4)
#include <iostream>
#include <stdexcept>
using namespace std;

class Node {
public:
    int dado;
    Node *prox;

    Node(int d, Node* p = nullptr) : dado(d), prox(p) {}
};

class ListaEncadeada {
private:
    Node *h;

    Node* inverteRecursivoAux(Node* atual) {
        if (atual == nullptr || atual->prox == nullptr) {
            return atual; 
        }

        Node* novoCabeca = inverteRecursivoAux(atual->prox); 
        atual->prox->prox = atual; 
        atual->prox = nullptr;    /
        return novoCabeca;      
    }

public:
    ListaEncadeada() {
        h = new Node(0); 
        h->prox = nullptr;
    }

    ~ListaEncadeada() {
        while (h->prox != nullptr) {
            removeLista(h->prox->dado);
        }
        delete h;
    }

    void insereLista(int x) {
        Node *n = new Node(x);
        n->prox = h->prox;
        h->prox = n;
    }

    void insereNoFinal(int x) {
        Node *atual = h;
        while (atual->prox != nullptr) {
            atual = atual->prox;
        }
        atual->prox = new Node(x);
    }

    int contaElementos() const {
        int contador = 0;
        Node *atual = h->prox;
        while (atual != nullptr) {
            contador++;
            atual = atual->prox;
        }
        return contador;
    }

    bool removeLista(int x) {
        Node *ant = h;
        Node *atual = h->prox;

        while (atual != nullptr) {
            if (atual->dado == x) {
                ant->prox = atual->prox;
                delete atual;
                return true;
            }
            ant = atual;
            atual = atual->prox;
        }
        return false;
    }

    void imprimeLista() const {
        Node *atual = h->prox;
        while (atual != nullptr) {
            cout << atual->dado << " ";
            atual = atual->prox;
        }
        cout << endl;
    }

    void inverteRecursivo() {
        h->prox = inverteRecursivoAux(h->prox); 
    }
};

int main() {
    ListaEncadeada lista;

    lista.insereNoFinal(10);
    lista.insereNoFinal(20);
    lista.insereNoFinal(30);
    lista.insereNoFinal(40);

    cout << "Lista original: ";
    lista.imprimeLista();

    lista.inverteRecursivo();

    cout << "Lista invertida: ";
    lista.imprimeLista();

    return 0;
}


Exercícios Desafiadores

1)


2)


3)


4)
